The ``BaseGeometry`` module
============================

Using ``BaseGeometry``
----------------------

This is a test file for the BaseGeometry class.

First, let's create the class:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Test basic functionality:

    >>> bg = BaseGeometry()

Test integer_validator with valid integers:

    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> bg.integer_validator("height", 1)
    >>> bg.integer_validator("size", 100)

Test integer_validator with invalid types:

    >>> bg.integer_validator("name", "John")
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> bg.integer_validator("age", 1.5)
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> bg.integer_validator("items", [1, 2, 3])
    Traceback (most recent call last):
    TypeError: items must be an integer

    >>> bg.integer_validator("flag", True)
    Traceback (most recent call last):
    TypeError: flag must be an integer

    >>> bg.integer_validator("data", None)
    Traceback (most recent call last):
    TypeError: data must be an integer

    >>> bg.integer_validator("info", {})
    Traceback (most recent call last):
    TypeError: info must be an integer

Test integer_validator with invalid values (zero and negative):

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

    >>> bg.integer_validator("distance", -4)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

    >>> bg.integer_validator("negative", -1)
    Traceback (most recent call last):
    ValueError: negative must be greater than 0

    >>> bg.integer_validator("zero", -0)
    Traceback (most recent call last):
    ValueError: zero must be greater than 0

Test area method:

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Test integer_validator with missing arguments:

    >>> bg.integer_validator("test")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test area method with arguments (should still raise exception):

    >>> bg.area(5)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

Test with very large integers:

    >>> bg.integer_validator("big_number", 999999999999999999)

Test with float that looks like int:

    >>> bg.integer_validator("float_int", 5.0)
    Traceback (most recent call last):
    TypeError: float_int must be an integer

Test with boolean (True/False are instances of int but type check should catch):

    >>> bg.integer_validator("bool_true", True)
    Traceback (most recent call last):
    TypeError: bool_true must be an integer

    >>> bg.integer_validator("bool_false", False)
    Traceback (most recent call last):
    TypeError: bool_false must be an integer
